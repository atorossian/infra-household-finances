name: Terraform Deploy (all envs)

on:
  push:
    branches: [ main ]          # auto-deploy dev on push
  workflow_dispatch:            # manual run for any env
    inputs:
      environment:
        description: "Which environment to deploy?"
        type: choice
        required: false
        default: dev
        options: [dev, staging, prod]

jobs:
  deploy:
    # compute env once for the job:
    strategy:
      matrix:
        env: [ ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || 'dev' }} ]

    runs-on: ubuntu-latest
    environment: ${{ matrix.env }}

    permissions:
      id-token: write
      contents: read

    env:
      AWS_REGION: eu-west-1
      ENV: ${{ matrix.env }}
      TF_BUCKET: infra-household-finances-tfstate
      TF_LOCK_TABLE: infra-household-finances-locks

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # idempotent: create the lock table if it doesn't exist
      - name: Ensure DynamoDB lock table
        shell: bash
        run: |
          set -euo pipefail
          if ! aws dynamodb describe-table --table-name "$TF_LOCK_TABLE" >/dev/null 2>&1; then
            aws dynamodb create-table \
              --table-name "$TF_LOCK_TABLE" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
            aws dynamodb wait table-exists --table-name "$TF_LOCK_TABLE"
          fi

      - name: Terraform Init (S3 backend; no workspaces)
        run: |
          terraform init -reconfigure -input=false \
            -backend-config="bucket=${TF_BUCKET}" \
            -backend-config="key=env:/${ENV}/terraform.tfstate" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"

      - name: Terraform Plan
        run: terraform plan -input=false -var-file=envs/${{ env.ENV }}.tfvars

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false -var-file=envs/${{ env.ENV }}.tfvars
